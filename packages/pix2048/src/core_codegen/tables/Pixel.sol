// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("Pixel")))
);
ResourceId constant PixelTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0088050314142020200000000000000000000000000000000000000000000000
);

struct PixelData {
  address app;
  address owner;
  uint256 timestamp;
  uint256 created_at;
  uint256 updated_at;
  string color;
  string text;
  string action;
}

library Pixel {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](2);
    _keySchema[0] = SchemaType.UINT32;
    _keySchema[1] = SchemaType.UINT32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](8);
    _valueSchema[0] = SchemaType.ADDRESS;
    _valueSchema[1] = SchemaType.ADDRESS;
    _valueSchema[2] = SchemaType.UINT256;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.UINT256;
    _valueSchema[5] = SchemaType.STRING;
    _valueSchema[6] = SchemaType.STRING;
    _valueSchema[7] = SchemaType.STRING;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "x";
    keyNames[1] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "app";
    fieldNames[1] = "owner";
    fieldNames[2] = "timestamp";
    fieldNames[3] = "created_at";
    fieldNames[4] = "updated_at";
    fieldNames[5] = "color";
    fieldNames[6] = "text";
    fieldNames[7] = "action";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get app.
   */
  function getApp(uint32 x, uint32 y) internal view returns (address app) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get app.
   */
  function _getApp(uint32 x, uint32 y) internal view returns (address app) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set app.
   */
  function setApp(uint32 x, uint32 y, address app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((app)), _fieldLayout);
  }

  /**
   * @notice Set app.
   */
  function _setApp(uint32 x, uint32 y, address app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((app)), _fieldLayout);
  }

  /**
   * @notice Get owner.
   */
  function getOwner(uint32 x, uint32 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get owner.
   */
  function _getOwner(uint32 x, uint32 y) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set owner.
   */
  function setOwner(uint32 x, uint32 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Set owner.
   */
  function _setOwner(uint32 x, uint32 y, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(uint32 x, uint32 y) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(uint32 x, uint32 y) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(uint32 x, uint32 y, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(uint32 x, uint32 y, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get created_at.
   */
  function getCreated_at(uint32 x, uint32 y) internal view returns (uint256 created_at) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get created_at.
   */
  function _getCreated_at(uint32 x, uint32 y) internal view returns (uint256 created_at) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set created_at.
   */
  function setCreated_at(uint32 x, uint32 y, uint256 created_at) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((created_at)), _fieldLayout);
  }

  /**
   * @notice Set created_at.
   */
  function _setCreated_at(uint32 x, uint32 y, uint256 created_at) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((created_at)), _fieldLayout);
  }

  /**
   * @notice Get updated_at.
   */
  function getUpdated_at(uint32 x, uint32 y) internal view returns (uint256 updated_at) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get updated_at.
   */
  function _getUpdated_at(uint32 x, uint32 y) internal view returns (uint256 updated_at) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set updated_at.
   */
  function setUpdated_at(uint32 x, uint32 y, uint256 updated_at) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((updated_at)), _fieldLayout);
  }

  /**
   * @notice Set updated_at.
   */
  function _setUpdated_at(uint32 x, uint32 y, uint256 updated_at) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((updated_at)), _fieldLayout);
  }

  /**
   * @notice Get color.
   */
  function getColor(uint32 x, uint32 y) internal view returns (string memory color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get color.
   */
  function _getColor(uint32 x, uint32 y) internal view returns (string memory color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set color.
   */
  function setColor(uint32 x, uint32 y, string memory color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((color)));
  }

  /**
   * @notice Set color.
   */
  function _setColor(uint32 x, uint32 y, string memory color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((color)));
  }

  /**
   * @notice Get the length of color.
   */
  function lengthColor(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of color.
   */
  function _lengthColor(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of color.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemColor(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of color.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemColor(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to color.
   */
  function pushColor(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to color.
   */
  function _pushColor(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from color.
   */
  function popColor(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from color.
   */
  function _popColor(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of color at `_index`.
   */
  function updateColor(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of color at `_index`.
   */
  function _updateColor(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get text.
   */
  function getText(uint32 x, uint32 y) internal view returns (string memory text) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Get text.
   */
  function _getText(uint32 x, uint32 y) internal view returns (string memory text) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Set text.
   */
  function setText(uint32 x, uint32 y, string memory text) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((text)));
  }

  /**
   * @notice Set text.
   */
  function _setText(uint32 x, uint32 y, string memory text) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((text)));
  }

  /**
   * @notice Get the length of text.
   */
  function lengthText(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of text.
   */
  function _lengthText(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of text.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemText(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of text.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemText(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to text.
   */
  function pushText(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to text.
   */
  function _pushText(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from text.
   */
  function popText(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from text.
   */
  function _popText(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update a slice of text at `_index`.
   */
  function updateText(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of text at `_index`.
   */
  function _updateText(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get action.
   */
  function getAction(uint32 x, uint32 y) internal view returns (string memory action) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Get action.
   */
  function _getAction(uint32 x, uint32 y) internal view returns (string memory action) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Set action.
   */
  function setAction(uint32 x, uint32 y, string memory action) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, bytes((action)));
  }

  /**
   * @notice Set action.
   */
  function _setAction(uint32 x, uint32 y, string memory action) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, bytes((action)));
  }

  /**
   * @notice Get the length of action.
   */
  function lengthAction(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of action.
   */
  function _lengthAction(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of action.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemAction(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of action.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemAction(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to action.
   */
  function pushAction(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Push a slice to action.
   */
  function _pushAction(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from action.
   */
  function popAction(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop a slice from action.
   */
  function _popAction(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update a slice of action at `_index`.
   */
  function updateAction(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of action at `_index`.
   */
  function _updateAction(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 x, uint32 y) internal view returns (PixelData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 x, uint32 y) internal view returns (PixelData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint32 x,
    uint32 y,
    address app,
    address owner,
    uint256 timestamp,
    uint256 created_at,
    uint256 updated_at,
    string memory color,
    string memory text,
    string memory action
  ) internal {
    bytes memory _staticData = encodeStatic(app, owner, timestamp, created_at, updated_at);

    PackedCounter _encodedLengths = encodeLengths(color, text, action);
    bytes memory _dynamicData = encodeDynamic(color, text, action);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint32 x,
    uint32 y,
    address app,
    address owner,
    uint256 timestamp,
    uint256 created_at,
    uint256 updated_at,
    string memory color,
    string memory text,
    string memory action
  ) internal {
    bytes memory _staticData = encodeStatic(app, owner, timestamp, created_at, updated_at);

    PackedCounter _encodedLengths = encodeLengths(color, text, action);
    bytes memory _dynamicData = encodeDynamic(color, text, action);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 x, uint32 y, PixelData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.app,
      _table.owner,
      _table.timestamp,
      _table.created_at,
      _table.updated_at
    );

    PackedCounter _encodedLengths = encodeLengths(_table.color, _table.text, _table.action);
    bytes memory _dynamicData = encodeDynamic(_table.color, _table.text, _table.action);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 x, uint32 y, PixelData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.app,
      _table.owner,
      _table.timestamp,
      _table.created_at,
      _table.updated_at
    );

    PackedCounter _encodedLengths = encodeLengths(_table.color, _table.text, _table.action);
    bytes memory _dynamicData = encodeDynamic(_table.color, _table.text, _table.action);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (address app, address owner, uint256 timestamp, uint256 created_at, uint256 updated_at) {
    app = (address(Bytes.slice20(_blob, 0)));

    owner = (address(Bytes.slice20(_blob, 20)));

    timestamp = (uint256(Bytes.slice32(_blob, 40)));

    created_at = (uint256(Bytes.slice32(_blob, 72)));

    updated_at = (uint256(Bytes.slice32(_blob, 104)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory color, string memory text, string memory action) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    color = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    text = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    action = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (PixelData memory _table) {
    (_table.app, _table.owner, _table.timestamp, _table.created_at, _table.updated_at) = decodeStatic(_staticData);

    (_table.color, _table.text, _table.action) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address app,
    address owner,
    uint256 timestamp,
    uint256 created_at,
    uint256 updated_at
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(app, owner, timestamp, created_at, updated_at);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory color,
    string memory text,
    string memory action
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(color).length, bytes(text).length, bytes(action).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    string memory color,
    string memory text,
    string memory action
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((color)), bytes((text)), bytes((action)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address app,
    address owner,
    uint256 timestamp,
    uint256 created_at,
    uint256 updated_at,
    string memory color,
    string memory text,
    string memory action
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(app, owner, timestamp, created_at, updated_at);

    PackedCounter _encodedLengths = encodeLengths(color, text, action);
    bytes memory _dynamicData = encodeDynamic(color, text, action);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 x, uint32 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    return _keyTuple;
  }
}
