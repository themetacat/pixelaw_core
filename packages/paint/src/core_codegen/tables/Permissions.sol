// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("Permissions")))
);
ResourceId constant PermissionsTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0006060001010101010100000000000000000000000000000000000000000000
);

struct PermissionsData {
  bool app;
  bool color;
  bool owner;
  bool text;
  bool timestamp;
  bool action;
}

library Permissions {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](2);
    _keySchema[0] = SchemaType.ADDRESS;
    _keySchema[1] = SchemaType.ADDRESS;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.BOOL;
    _valueSchema[1] = SchemaType.BOOL;
    _valueSchema[2] = SchemaType.BOOL;
    _valueSchema[3] = SchemaType.BOOL;
    _valueSchema[4] = SchemaType.BOOL;
    _valueSchema[5] = SchemaType.BOOL;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "allowing_app";
    keyNames[1] = "allowed_app";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "app";
    fieldNames[1] = "color";
    fieldNames[2] = "owner";
    fieldNames[3] = "text";
    fieldNames[4] = "timestamp";
    fieldNames[5] = "action";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get app.
   */
  function getApp(address allowing_app, address allowed_app) internal view returns (bool app) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get app.
   */
  function _getApp(address allowing_app, address allowed_app) internal view returns (bool app) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set app.
   */
  function setApp(address allowing_app, address allowed_app, bool app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((app)), _fieldLayout);
  }

  /**
   * @notice Set app.
   */
  function _setApp(address allowing_app, address allowed_app, bool app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((app)), _fieldLayout);
  }

  /**
   * @notice Get color.
   */
  function getColor(address allowing_app, address allowed_app) internal view returns (bool color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get color.
   */
  function _getColor(address allowing_app, address allowed_app) internal view returns (bool color) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set color.
   */
  function setColor(address allowing_app, address allowed_app, bool color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((color)), _fieldLayout);
  }

  /**
   * @notice Set color.
   */
  function _setColor(address allowing_app, address allowed_app, bool color) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((color)), _fieldLayout);
  }

  /**
   * @notice Get owner.
   */
  function getOwner(address allowing_app, address allowed_app) internal view returns (bool owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get owner.
   */
  function _getOwner(address allowing_app, address allowed_app) internal view returns (bool owner) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set owner.
   */
  function setOwner(address allowing_app, address allowed_app, bool owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Set owner.
   */
  function _setOwner(address allowing_app, address allowed_app, bool owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Get text.
   */
  function getText(address allowing_app, address allowed_app) internal view returns (bool text) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get text.
   */
  function _getText(address allowing_app, address allowed_app) internal view returns (bool text) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set text.
   */
  function setText(address allowing_app, address allowed_app, bool text) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((text)), _fieldLayout);
  }

  /**
   * @notice Set text.
   */
  function _setText(address allowing_app, address allowed_app, bool text) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((text)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(address allowing_app, address allowed_app) internal view returns (bool timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(address allowing_app, address allowed_app) internal view returns (bool timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(address allowing_app, address allowed_app, bool timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(address allowing_app, address allowed_app, bool timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get action.
   */
  function getAction(address allowing_app, address allowed_app) internal view returns (bool action) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get action.
   */
  function _getAction(address allowing_app, address allowed_app) internal view returns (bool action) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set action.
   */
  function setAction(address allowing_app, address allowed_app, bool action) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((action)), _fieldLayout);
  }

  /**
   * @notice Set action.
   */
  function _setAction(address allowing_app, address allowed_app, bool action) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((action)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(address allowing_app, address allowed_app) internal view returns (PermissionsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(address allowing_app, address allowed_app) internal view returns (PermissionsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address allowing_app,
    address allowed_app,
    bool app,
    bool color,
    bool owner,
    bool text,
    bool timestamp,
    bool action
  ) internal {
    bytes memory _staticData = encodeStatic(app, color, owner, text, timestamp, action);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address allowing_app,
    address allowed_app,
    bool app,
    bool color,
    bool owner,
    bool text,
    bool timestamp,
    bool action
  ) internal {
    bytes memory _staticData = encodeStatic(app, color, owner, text, timestamp, action);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address allowing_app, address allowed_app, PermissionsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.app,
      _table.color,
      _table.owner,
      _table.text,
      _table.timestamp,
      _table.action
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address allowing_app, address allowed_app, PermissionsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.app,
      _table.color,
      _table.owner,
      _table.text,
      _table.timestamp,
      _table.action
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (bool app, bool color, bool owner, bool text, bool timestamp, bool action) {
    app = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    color = (_toBool(uint8(Bytes.slice1(_blob, 1))));

    owner = (_toBool(uint8(Bytes.slice1(_blob, 2))));

    text = (_toBool(uint8(Bytes.slice1(_blob, 3))));

    timestamp = (_toBool(uint8(Bytes.slice1(_blob, 4))));

    action = (_toBool(uint8(Bytes.slice1(_blob, 5))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (PermissionsData memory _table) {
    (_table.app, _table.color, _table.owner, _table.text, _table.timestamp, _table.action) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address allowing_app, address allowed_app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address allowing_app, address allowed_app) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool app,
    bool color,
    bool owner,
    bool text,
    bool timestamp,
    bool action
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(app, color, owner, text, timestamp, action);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool app,
    bool color,
    bool owner,
    bool text,
    bool timestamp,
    bool action
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(app, color, owner, text, timestamp, action);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address allowing_app, address allowed_app) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(allowing_app)));
    _keyTuple[1] = bytes32(uint256(uint160(allowed_app)));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
