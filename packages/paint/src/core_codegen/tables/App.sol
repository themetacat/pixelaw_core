// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("App"))));
ResourceId constant AppTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0028020514140000000000000000000000000000000000000000000000000000
);

struct AppData {
  address developer;
  address system_addr;
  string namespace;
  string system_name;
  string manifest;
  string icon;
  string action;
}

library App {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](7);
    _valueSchema[0] = SchemaType.ADDRESS;
    _valueSchema[1] = SchemaType.ADDRESS;
    _valueSchema[2] = SchemaType.STRING;
    _valueSchema[3] = SchemaType.STRING;
    _valueSchema[4] = SchemaType.STRING;
    _valueSchema[5] = SchemaType.STRING;
    _valueSchema[6] = SchemaType.STRING;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "app_name_key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "developer";
    fieldNames[1] = "system_addr";
    fieldNames[2] = "namespace";
    fieldNames[3] = "system_name";
    fieldNames[4] = "manifest";
    fieldNames[5] = "icon";
    fieldNames[6] = "action";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get developer.
   */
  function getDeveloper(bytes32 app_name_key) internal view returns (address developer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get developer.
   */
  function _getDeveloper(bytes32 app_name_key) internal view returns (address developer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set developer.
   */
  function setDeveloper(bytes32 app_name_key, address developer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((developer)), _fieldLayout);
  }

  /**
   * @notice Set developer.
   */
  function _setDeveloper(bytes32 app_name_key, address developer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((developer)), _fieldLayout);
  }

  /**
   * @notice Get system_addr.
   */
  function getSystem_addr(bytes32 app_name_key) internal view returns (address system_addr) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get system_addr.
   */
  function _getSystem_addr(bytes32 app_name_key) internal view returns (address system_addr) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set system_addr.
   */
  function setSystem_addr(bytes32 app_name_key, address system_addr) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((system_addr)), _fieldLayout);
  }

  /**
   * @notice Set system_addr.
   */
  function _setSystem_addr(bytes32 app_name_key, address system_addr) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((system_addr)), _fieldLayout);
  }

  /**
   * @notice Get namespace.
   */
  function getNamespace(bytes32 app_name_key) internal view returns (string memory namespace) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get namespace.
   */
  function _getNamespace(bytes32 app_name_key) internal view returns (string memory namespace) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set namespace.
   */
  function setNamespace(bytes32 app_name_key, string memory namespace) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((namespace)));
  }

  /**
   * @notice Set namespace.
   */
  function _setNamespace(bytes32 app_name_key, string memory namespace) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((namespace)));
  }

  /**
   * @notice Get the length of namespace.
   */
  function lengthNamespace(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of namespace.
   */
  function _lengthNamespace(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of namespace.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemNamespace(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of namespace.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemNamespace(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to namespace.
   */
  function pushNamespace(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to namespace.
   */
  function _pushNamespace(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from namespace.
   */
  function popNamespace(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from namespace.
   */
  function _popNamespace(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of namespace at `_index`.
   */
  function updateNamespace(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of namespace at `_index`.
   */
  function _updateNamespace(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get system_name.
   */
  function getSystem_name(bytes32 app_name_key) internal view returns (string memory system_name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Get system_name.
   */
  function _getSystem_name(bytes32 app_name_key) internal view returns (string memory system_name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Set system_name.
   */
  function setSystem_name(bytes32 app_name_key, string memory system_name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((system_name)));
  }

  /**
   * @notice Set system_name.
   */
  function _setSystem_name(bytes32 app_name_key, string memory system_name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((system_name)));
  }

  /**
   * @notice Get the length of system_name.
   */
  function lengthSystem_name(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of system_name.
   */
  function _lengthSystem_name(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of system_name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemSystem_name(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of system_name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemSystem_name(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to system_name.
   */
  function pushSystem_name(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to system_name.
   */
  function _pushSystem_name(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from system_name.
   */
  function popSystem_name(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from system_name.
   */
  function _popSystem_name(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update a slice of system_name at `_index`.
   */
  function updateSystem_name(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of system_name at `_index`.
   */
  function _updateSystem_name(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get manifest.
   */
  function getManifest(bytes32 app_name_key) internal view returns (string memory manifest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Get manifest.
   */
  function _getManifest(bytes32 app_name_key) internal view returns (string memory manifest) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /**
   * @notice Set manifest.
   */
  function setManifest(bytes32 app_name_key, string memory manifest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, bytes((manifest)));
  }

  /**
   * @notice Set manifest.
   */
  function _setManifest(bytes32 app_name_key, string memory manifest) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, bytes((manifest)));
  }

  /**
   * @notice Get the length of manifest.
   */
  function lengthManifest(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of manifest.
   */
  function _lengthManifest(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of manifest.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemManifest(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of manifest.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemManifest(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to manifest.
   */
  function pushManifest(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Push a slice to manifest.
   */
  function _pushManifest(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from manifest.
   */
  function popManifest(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop a slice from manifest.
   */
  function _popManifest(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update a slice of manifest at `_index`.
   */
  function updateManifest(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of manifest at `_index`.
   */
  function _updateManifest(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get icon.
   */
  function getIcon(bytes32 app_name_key) internal view returns (string memory icon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /**
   * @notice Get icon.
   */
  function _getIcon(bytes32 app_name_key) internal view returns (string memory icon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /**
   * @notice Set icon.
   */
  function setIcon(bytes32 app_name_key, string memory icon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, bytes((icon)));
  }

  /**
   * @notice Set icon.
   */
  function _setIcon(bytes32 app_name_key, string memory icon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, bytes((icon)));
  }

  /**
   * @notice Get the length of icon.
   */
  function lengthIcon(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of icon.
   */
  function _lengthIcon(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of icon.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemIcon(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of icon.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemIcon(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to icon.
   */
  function pushIcon(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /**
   * @notice Push a slice to icon.
   */
  function _pushIcon(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from icon.
   */
  function popIcon(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 1);
  }

  /**
   * @notice Pop a slice from icon.
   */
  function _popIcon(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 1);
  }

  /**
   * @notice Update a slice of icon at `_index`.
   */
  function updateIcon(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of icon at `_index`.
   */
  function _updateIcon(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get action.
   */
  function getAction(bytes32 app_name_key) internal view returns (string memory action) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /**
   * @notice Get action.
   */
  function _getAction(bytes32 app_name_key) internal view returns (string memory action) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /**
   * @notice Set action.
   */
  function setAction(bytes32 app_name_key, string memory action) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 4, bytes((action)));
  }

  /**
   * @notice Set action.
   */
  function _setAction(bytes32 app_name_key, string memory action) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setDynamicField(_tableId, _keyTuple, 4, bytes((action)));
  }

  /**
   * @notice Get the length of action.
   */
  function lengthAction(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 4);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of action.
   */
  function _lengthAction(bytes32 app_name_key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 4);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of action.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemAction(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 4, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of action.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemAction(bytes32 app_name_key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 4, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to action.
   */
  function pushAction(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /**
   * @notice Push a slice to action.
   */
  function _pushAction(bytes32 app_name_key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from action.
   */
  function popAction(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 4, 1);
  }

  /**
   * @notice Pop a slice from action.
   */
  function _popAction(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 4, 1);
  }

  /**
   * @notice Update a slice of action at `_index`.
   */
  function updateAction(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 4, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of action at `_index`.
   */
  function _updateAction(bytes32 app_name_key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 4, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 app_name_key) internal view returns (AppData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 app_name_key) internal view returns (AppData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 app_name_key,
    address developer,
    address system_addr,
    string memory namespace,
    string memory system_name,
    string memory manifest,
    string memory icon,
    string memory action
  ) internal {
    bytes memory _staticData = encodeStatic(developer, system_addr);

    PackedCounter _encodedLengths = encodeLengths(namespace, system_name, manifest, icon, action);
    bytes memory _dynamicData = encodeDynamic(namespace, system_name, manifest, icon, action);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 app_name_key,
    address developer,
    address system_addr,
    string memory namespace,
    string memory system_name,
    string memory manifest,
    string memory icon,
    string memory action
  ) internal {
    bytes memory _staticData = encodeStatic(developer, system_addr);

    PackedCounter _encodedLengths = encodeLengths(namespace, system_name, manifest, icon, action);
    bytes memory _dynamicData = encodeDynamic(namespace, system_name, manifest, icon, action);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 app_name_key, AppData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.developer, _table.system_addr);

    PackedCounter _encodedLengths = encodeLengths(
      _table.namespace,
      _table.system_name,
      _table.manifest,
      _table.icon,
      _table.action
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.namespace,
      _table.system_name,
      _table.manifest,
      _table.icon,
      _table.action
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 app_name_key, AppData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.developer, _table.system_addr);

    PackedCounter _encodedLengths = encodeLengths(
      _table.namespace,
      _table.system_name,
      _table.manifest,
      _table.icon,
      _table.action
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.namespace,
      _table.system_name,
      _table.manifest,
      _table.icon,
      _table.action
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (address developer, address system_addr) {
    developer = (address(Bytes.slice20(_blob, 0)));

    system_addr = (address(Bytes.slice20(_blob, 20)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      string memory namespace,
      string memory system_name,
      string memory manifest,
      string memory icon,
      string memory action
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    namespace = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    system_name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    manifest = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    icon = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(4);
    }
    action = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (AppData memory _table) {
    (_table.developer, _table.system_addr) = decodeStatic(_staticData);

    (_table.namespace, _table.system_name, _table.manifest, _table.icon, _table.action) = decodeDynamic(
      _encodedLengths,
      _dynamicData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 app_name_key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(address developer, address system_addr) internal pure returns (bytes memory) {
    return abi.encodePacked(developer, system_addr);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory namespace,
    string memory system_name,
    string memory manifest,
    string memory icon,
    string memory action
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(
        bytes(namespace).length,
        bytes(system_name).length,
        bytes(manifest).length,
        bytes(icon).length,
        bytes(action).length
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    string memory namespace,
    string memory system_name,
    string memory manifest,
    string memory icon,
    string memory action
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(bytes((namespace)), bytes((system_name)), bytes((manifest)), bytes((icon)), bytes((action)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address developer,
    address system_addr,
    string memory namespace,
    string memory system_name,
    string memory manifest,
    string memory icon,
    string memory action
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(developer, system_addr);

    PackedCounter _encodedLengths = encodeLengths(namespace, system_name, manifest, icon, action);
    bytes memory _dynamicData = encodeDynamic(namespace, system_name, manifest, icon, action);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 app_name_key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = app_name_key;

    return _keyTuple;
  }
}
